package pe.edu.pucp.fasticket.listeners;

import org.springframework.context.event.EventListener;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Component;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import pe.edu.pucp.fasticket.events.ClienteRegistradoEvent;
import pe.edu.pucp.fasticket.events.CompraAnuladaEvent;
import pe.edu.pucp.fasticket.events.CompraConfirmadaEvent;
import pe.edu.pucp.fasticket.events.EventoCanceladoEvent;
import pe.edu.pucp.fasticket.events.RecuperacionContrasenaEvent;
import pe.edu.pucp.fasticket.services.notificaciones.NotificacionService;

/**
 * Listener que implementa el Patr√≥n Observer para escuchar eventos de dominio.
 * 
 * Este componente se suscribe a los eventos publicados en la aplicaci√≥n y
 * desencadena las notificaciones correspondientes de forma AS√çNCRONA.
 * 
 * VENTAJAS DE ESTE PATR√ìN:
 * 1. Desacoplamiento: Los servicios de negocio no conocen el sistema de notificaciones
 * 2. Robustez: Los errores en notificaciones NO afectan el flujo principal
 * 3. Escalabilidad: Procesamiento as√≠ncrono no bloquea las transacciones
 * 4. Extensibilidad: F√°cil a√±adir nuevos listeners sin modificar c√≥digo existente
 * 
 * @author Equipo Fasticket
 * @version 1.0
 */
@Component
@RequiredArgsConstructor
@Slf4j
public class NotificacionListener {

    private final NotificacionService notificacionService;

    /**
     * RF-048: Escucha eventos de registro de cliente.
     * 
     * @Async: Se ejecuta en un hilo separado, no bloquea el registro del usuario.
     * Si falla el env√≠o del email, el usuario ya est√° registrado.
     */
    @EventListener
    @Async("taskExecutor")
    public void handleClienteRegistrado(ClienteRegistradoEvent event) {
        log.info("üîî [OBSERVER] Evento recibido: ClienteRegistradoEvent para {}", event.getEmail());
        
        try {
            notificacionService.enviarEmailVerificacion(
                event.getEmail(),
                event.getNombreCompleto(),
                event.getTokenVerificacion()
            );
        } catch (Exception e) {
            // CR√çTICO: Capturamos cualquier excepci√≥n para evitar que rompa el flujo
            log.error("‚ùå Error en listener de cliente registrado (no cr√≠tico): {}", e.getMessage(), e);
        }
    }

    /**
     * RF-049, RF-086: Escucha eventos de compra confirmada.
     * 
     * Env√≠a confirmaci√≥n con detalles de la compra y los tickets.
     */
    @EventListener
    @Async("taskExecutor")
    public void handleCompraConfirmada(CompraConfirmadaEvent event) {
        log.info("üîî [OBSERVER] Evento recibido: CompraConfirmadaEvent para orden #{}", 
                 event.getOrden().getIdOrdenCompra());
        
        try {
            String nombreCliente = event.getOrden().getCliente().getNombres() + " " + 
                                  event.getOrden().getCliente().getApellidos();
            
            notificacionService.enviarConfirmacionCompra(
                event.getOrden(),
                event.getEmailCliente(),
                nombreCliente
            );
        } catch (Exception e) {
            log.error("‚ùå Error en listener de compra confirmada (no cr√≠tico): {}", e.getMessage(), e);
        }
    }

    /**
     * RF-016: Escucha eventos de cancelaci√≥n de evento.
     * 
     * Notifica a TODOS los clientes que compraron tickets para ese evento.
     */
    @EventListener
    @Async("taskExecutor")
    public void handleEventoCancelado(EventoCanceladoEvent event) {
        log.info("üîî [OBSERVER] Evento recibido: EventoCanceladoEvent - {}", 
                 event.getEvento().getNombre());
        
        try {
            // Enviar email a cada cliente afectado
            for (String email : event.getEmailsAfectados()) {
                try {
                    // Aqu√≠ idealmente obtendr√≠amos el nombre del cliente
                    notificacionService.enviarNotificacionEventoCancelado(
                        event.getEvento(),
                        email,
                        "Cliente", // TODO: Obtener nombre real del cliente
                        event.getMotivoCancelacion()
                    );
                } catch (Exception e) {
                    log.error("‚ùå Error al enviar notificaci√≥n a {}: {}", email, e.getMessage());
                    // Continuamos con el siguiente email
                }
            }
            
            log.info("‚úÖ Notificaciones de cancelaci√≥n enviadas a {} clientes", 
                     event.getEmailsAfectados().size());
        } catch (Exception e) {
            log.error("‚ùå Error en listener de evento cancelado: {}", e.getMessage(), e);
        }
    }

    /**
     * RF-052: Escucha eventos de recuperaci√≥n de contrase√±a.
     */
    @EventListener
    @Async("taskExecutor")
    public void handleRecuperacionContrasena(RecuperacionContrasenaEvent event) {
        log.info("üîî [OBSERVER] Evento recibido: RecuperacionContrasenaEvent para {}", 
                 event.getEmail());
        
        try {
            notificacionService.enviarRecuperacionContrasena(
                event.getEmail(),
                event.getNombreCompleto(),
                event.getTokenRecuperacion()
            );
        } catch (Exception e) {
            log.error("‚ùå Error en listener de recuperaci√≥n de contrase√±a: {}", e.getMessage(), e);
        }
    }

    /**
     * RF-089: Escucha eventos de compra anulada.
     */
    @EventListener
    @Async("taskExecutor")
    public void handleCompraAnulada(CompraAnuladaEvent event) {
        log.info("üîî [OBSERVER] Evento recibido: CompraAnuladaEvent para orden #{}", 
                 event.getOrden().getIdOrdenCompra());
        
        try {
            String nombreCliente = event.getOrden().getCliente().getNombres() + " " + 
                                  event.getOrden().getCliente().getApellidos();
            
            notificacionService.enviarNotificacionCompraAnulada(
                event.getOrden(),
                event.getEmailCliente(),
                nombreCliente,
                event.getMotivoAnulacion()
            );
        } catch (Exception e) {
            log.error("‚ùå Error en listener de compra anulada: {}", e.getMessage(), e);
        }
    }
}

